// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "cockroachdb"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the  annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}
model Widget {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
}
model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String
    email         String   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    posts        Post[]
    comments     Comment[]
    likes        Like[]
    commentLikes CommentLike[]
    profile      Profile?
}

model Profile {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    bio       String?
    pronouns  String? @default("they/them")
    profileImage String?

    user      User     @relation(fields: [userId], references: [id])
    userId    String   @unique
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Post {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    title     String
    content   String
    published Boolean  @default(false)
    imageUrl  String
    author    User     @relation(fields: [authorId], references: [id])
    authorId  String
    slug      String
    comments  Comment[]
    likes     Like[]
    categories Category[]
}

model Category {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    value      String @unique
    posts     Post[]
}

model Comment {
  id   String @id @default(cuid())
  body String
  user   User   @relation(fields: [userId], references: [id])
  userId String
  Post   Post   @relation(fields: [postId], references: [id])
  postId String
  children Comment[] @relation("comment_children")
  parent   Comment?  @relation("comment_children", fields: [parentId], references: [id])
  parentId String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
    likes     CommentLike[]
}
model Like {
    user   User   @relation(fields: [userId], references: [id])
    userId String
    post   Post   @relation(fields: [postId], references: [id])
    postId String
    @@id ([postId, userId])
  @@index([postId, userId])
  @@index([postId])
  @@index([userId])
}


model CommentLike {
    user  User   @relation(fields: [userId], references: [id])
    userId String
    comment   Comment   @relation(fields: [commentId], references: [id])
    commentId String
    @@id ([commentId, userId])
    @@index([commentId, userId])
    @@index([commentId])
    @@index([userId])

}
